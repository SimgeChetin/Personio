with new_mrr as (
    select
        customers.subscription_id
        , min(invoice.invoice_created_month) as first_invoice_created_month
    from {{ ref('fact_inovices') }} as invoice
    inner join {{ ref('dim_customers') }} as customers
        on invoice.customer_id = customers.customer_id
    group by 1
)

, revenue_generated as (
    select
        cust_subs_monthly.customer_id
        , cust_subs_monthly.subscription_id
        , cust_subs_monthly.billing_year_month
        , cust_subs_monthly.customer_status
        , cust_subs_monthly.customer_churn_billing_year_month
        , cust_subs_monthly.subs_start_billing_year_month
        , cust_subs_monthly.subs_end_billing_year_month
        , cust_subs_monthly.is_subscription_to_renew
        , cust_subs_monthly.months_left_to_new_subscription
        ----upgrade & downgrade revenue 
        , coalesce(sum(invoice.upgrade_invoice_amount),0) as  upgrade_revenue
        , coalesce(sum(invoice.downgrade_invoice_amount),0) as downgrade_revenue
        ----revenue generated by invoices
        , coalesce(sum(invoice.total_invoice_charge_amount), 0) as revenue
        , coalesce(sum(invoice.total_invoice_charge_amount_with_discount),0) as revenue_after_discounts
        , coalesce(lag(revenue) over (partition by cust_subs_monthly.customer_id 
            order by cust_subs_monthly.billing_year_month),0) as starting_month_revenue
        , coalesce(lag(revenue_after_discounts) over (partition by cust_subs_monthly.customer_id
            order by cust_subs_monthly.billing_year_month), 0) as starting_month_revenue_after_discounts
        , coalesce(case when cust_subs_monthly.customer_status = 'churned' then starting_month_revenue end, 0) as churn_lost_revenue
        , coalesce(case when cust_subs_monthly.customer_status = 'churned' then starting_month_revenue_after_discounts end, 0) as churn_lost_revenue_after_discounts
        ----- revenue generated by payments , cash revenue
        , coalesce(sum(payments.payment_amount), 0) as revenue_cash
        , coalesce(lag(revenue_cash) over(partition by cust_subs_monthly.customer_id order by cust_subs_monthly.billing_year_month asc ),0) as starting_month_revenue_cash
        , coalesce(case when cust_subs_monthly.customer_status = 'churned' then starting_month_revenue_cash end,0) as churn_lost_revenue_cash
    from {{ ref('dim_customers_subscriptions_monthly') }} as cust_subs_monthly
    left join {{ ref('fact_invoices') }} as invoice
        on cust_subs_monthly.customer_id = invoice.customer_id
            and cust_subs_monthly.billing_year_month = invoice.invoice_created_month
    left join {{ ref('fact_payments') }} as payments
        on cust_subs_monthly.subscription_id = payments.subscription_id
            and cust_subs_monthly.billing_year_month = payments.payment_year_month
    group by all
)


select
    revenue_generated.*
    , coalesce(case when new_mrr.first_invoice_created_month = revenue_generated.billing_year_month then revenue_generated.revenue end,0) as new_revenue
    , new_mrr.first_invoice_created_month = revenue_generated.billing_year_month as is_new_customer
    ---- Gross revenue generated by billing : (starting_month_revenue_after_discounts + upgrade_revenue (except when customer just got acquired since it is already included in new revenue) + new_revenue)
    , case when is_new_customer then 
        revenue_generated.starting_month_revenue_after_discounts + new_revenue
        else 
        revenue_generated.starting_month_revenue_after_discounts + revenue_generated.upgrade_revenue + new_revenue
    end as gross_revenue
    ----- Net Revenue generetaed by billing: (Gross revenue - churn_lost_revenue_after_discounts - downgrade_revenue )
    , gross_revenue - revenue_generated.churn_lost_revenue_after_discounts - revenue_generated.downgrade_revenue as net_revenue
    , revenue_generated.customer_status = 'churned' as is_customer_churned
    , datediff('month', revenue_generated.billing_year_month, revenue_generated.customer_churn_billing_year_month) as months_left_to_churn
from revenue_generated
left join new_mrr
    on revenue_generated.subscription_id = new_mrr.subscription_id
where revenue_generated.billing_year_month <= add_months(date_trunc('month', current_date()), 6)